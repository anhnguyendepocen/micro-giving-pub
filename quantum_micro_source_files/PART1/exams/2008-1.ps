%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95b Copyright 2005 Radical Eye Software
%%Title: 2008-1.dvi
%%CreationDate: Thu Jan 24 16:18:12 2008
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR12 CMR10 CMTI10 CMMI10 CMSY10 CMR7 CMMI7
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe 2008-1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.01.24:1617
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def% return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def% return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 110 /n put
readonly def
/FontBBox{0 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC0C51802EA1E0C63E6DE20980D3DD206F05360F78906FF0132D5F4EB
8B2384EBF991DF6A99488477067F4A8C0FCE0CDE8FDEDE80EE0E087271DCB088
9A0B2ED6FCA29399FF34CAAD2F4ADE9979E7B1F46EBCF7EAAA9C1BD7D5A7C901
C4F56769AB3279B88B453CAD4F980D5776CBAFA7A5E45EA940A80018FF8A1060
649DBA8BECEB5FB18938F7E69FDCC37A64DA9FE7336ED1BBE2609B8752409617
6D0C56A0CA33A91D7D34AC34703DD12E031D0EEDDC326DB3C7D69E2EEEF2103E
0207D54FCA89E72DF619FDA6021550754A0D030D6EAD60F32A4889A025703DE5
A8CDED50E5F7F6F06CB9A29BD7A5FA653CB399D3B21A2B4BF37F51C31C165D68
01F36ED6F31DB77CA973CF6B83D22495487E1B6024F5E3102FF2C81D6BBFEE37
EDF7922ED0D015B44F48A5D9D038D9831EF172D0346456F4B9845DC2E57D2DF0
566DC8DD79D13BF83B380CB195F7619E0F6B2578A36C3EBAF45E775F06CB33DA
90630DA177E741F5E86D6C2CCD285CE0C39070FE3BB5C5AC5EAD82753A521F6D
E159B9CC589E1DA082437A1E0CF115B3B88DE31461153596734DFC910E7D2A64
2CFE5D5BE313E4CB2B7665893A51B263E664094A94078AD2F3D7A189168D95B0
029D54A6CF6D85773F314ED03B0D43A5602416F30BC1A9B44D7AA2EE12034AB5
B2C7DE0B9F15DC55C6C808C5AECEF16F70453F209BFF0D5E9038A6603946D9D4
FA1FB5435EBFB48DBDF1521A1AA595DB64FA37D36CFD73675F18C1601CE2D5C8
92764CC093EB43726671E23A6953368F4C31CE413326629E87264D1B0D1855AB
E20AEF4B8030F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4CD5C7347D2E
1D0D6630F446F3708FCB29A84043FF9994DEEA972C57A09A9480DA27009892D3
09A79727975D38D137A647156FB47D79C82D49F5DE82CE25B3D0FA203BC2648C
DDBBED0FB787FD8379E5EF25899549AB2BB32D748C379AF3CACBAC27C5E424B7
0C0BEC3B9B8D39F08618FB574A5DB5051C2EF449F9751B168CF2AE5AF23843F4
70DB2DFF96E724588920CAD3BD1D845490D4D6B610632B11F78544DF8D459041
0531F1E25F6F4B124335B3E097DDF640C6E287C77BAEA10D215E08FE71F191FC
B916A9EE05825210880E42D6ADCD64BA8A70FF92EF3DCC9DFE823F458B87AD20
84C1B6994F1553B0393790F5ADF2BA6BF8EEFAD6F22C2BB3C481A949F65E2B1F
12CD8653230A69611FAE7394310C2B0427085FA5DDD46D0919C327A9E464BA04
2CC1D25D58001ED2E97B26DFEDD83431FA13BC0559394859875F5CBD2A32D50F
7C2406CA677DE52F4DD804239E39A75D729EEE5A520161E05E3363732137E783
AC79A14436C5C724312FD1066E68A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 25 /approxequal put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC57036431151EC603C8BCFE359BBD953AD
5F3D9983B036D9202C8FCC4FA88AF960E1E49914EC809263862931DB14B61EEE
6D37A389B488D0B64CFB7DA527AAED80494F79A073D895AA287BB47BD5246090
A76CE91680C1F37E66C171E4F84E956EB4F7100F82B9823272B9CFA8CE3D462A
53EAB714BA01651E68C5A898909D4866E96C5BDFD19C80909225B80300F71CA1
E1F2A41735DDB2DAF1188AF2D8448ED6CC03DAC241318376B0F607FAF83BE0AC
0406DD00829AA9F48B4E65C201124A428F77B343E51D5DA5B8D4FC7A03EE4B01
A1588CCBAA226D17E7320018214A62446A754E064D81E8DBB6B9E4AB20AD6092
E3AB33641A208569E65BEFF8A7ECAA766A9347BCCDFD823B7A5379E2C1985958
C288B811A52283C6C7EE397BDE632456EEF1A752A8AD7F199E0B6FD15AF073A9
5BF9204685A8D20D035640EF8863DB53130864C92D99253A4C319E7CAB866F6E
4EA9A16EC147BB4937D4065273C0E220E7726981109F2D74DC654957F08FE475
52AF3289D9C83236002E9D1359604625030A0A4456E9FA1DD2D6F93B8DAA2338
F84F7BB848EA19CD9DAE23B1A6E2397C2EE2ECD0C156E550058A08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 105 /i put
dup 110 /n put
dup 114 /r put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176671A33FC55340CD04C2DE46FD812FC2711A85E61442AB93E8157A603D
91023151267FB376665DDADCADD27FB02C8ED543E20516DA8FF6AF77848523C5
86A500942F5D59B75422A42CF5876232320E2F1C54F833B52CB157AA3AE9BD9E
41D21BF31505D278ED3425703FF221D03E5A9CE7454486894A9E09783EA91DBD
78E4FE28D400CBC0EDF8400AE8FB1FD3427AEA036EB30384B162554AF4385233
D616B98E8812A38B15149602A801FB0DF49FBBE07676BF83A0AF3BF6B0F8E606
672C4F7CCF6F53FF1149C32D02852D28AC472BC7B3C1E0352FDDA144F22E7960
2366B1D6C7A8360381F1F2A380E6368884F5CBEC9612F7C1C29E06014BCE0806
FF7B6A37A0156F7CB3BEC16CF3D9271E41C2C4413EBA36D3ADF85150DE1BBB0F
B0F4C59CAE23A76F50EC0C6CBFE3CCD43549564E17CFD26734F63924DAC7A50B
56E3A961C80509144915E7B443E6268590AA5DCD2C882025A7DAB37685552D7C
88C1D6E7630E986C70598E7C364F8A35CCDA855E4B588359628A0915F2940BD3
0C9B3AB11EC00180ADAA3ABDFE0FF53064E75AA7CDADC47B1726877EB6DE2F07
2F2FECDFCB294D444D88B92BCFA8F26C59176A6C57D93E9B8FB2C616ACDAACAD
B9A0A3F4BC3B7A4C5A1BDB588336B253D5825560DC18ABD77F1F8EF60A6D5885
61C8818A284B61F66BEB0E2677B51E29B4C2E2C3E0D563597A1A6783530EBF7E
EFD4BA14A10AB5B475DEC023EAB05C28DDF1A4171FA1FF5A02F4C7253E6748A4
13F118C265A816806B79225CFAE2F8EF8DCF88386D75DC2A34A50231DCE0D6CF
4CD8BB21D19FB03156A6D9A8F921549919F2766C8E05288C440FD00D56E7562F
5386413BEA407FABF48F60990273B856FE11EA321242350E8AA4F36B2DCCD686
32F0356F5949C6F8C6B690633050DE42310284FE991ACEB2589C5FBB645A641E
02CCD4B88649C43355D2ED48ED608E53FE959291285BE00AF736C3E2524F022B
CBD4B0D70C6EC1DD96FCA9EC22304E0CAE5CB8ACE8FB407C22A27BBBA2C25004
A73210C526EBF4ED5A9614EBF00D0AD9AAF4C0D30A96F097A5D340C9340F0269
063B76AAD6B4B0BB62C6DD581176597FD8D06D94BD71BADECA9D2A185BF6D371
16004F81A1A0D6A72583004E311CFDED8F2B19D1169D9CA1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 98 /b put
dup 101 /e put
dup 102 /f put
dup 111 /o put
dup 114 /r put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
592943209E846E55B4CB54F6658CBA3C0B29796D69D0435D5431ABECF3448C15
98CA2F36F3659E29AEB79355EC2ADF835CF0886C21B766B9DEBC3950B5B3B496
2E06D980A8C60305B273232D4604F12632FB4F1B2F9703952C823C098543AED1
CFB4ECF259A11985F0C944A57B5AFD853374FCF12305601200C2A393E2FC77FD
F78C2BEFFDFC4C9EAD682618538735E450B90C07A18938E1A97DD125317E7A52
1BC5EA4140C9D28D6CE6339AAE5F5C55C5ABBD26B42EB815DC4D032C33E81DBA
7B620163D172F15AB9188D97A3F54CDB53EE481EA8354D570CD15E7CAB0BE67C
FBAF8FD5C8556D995130FF0C8D322AFEC93024811C8485F5DBD605455C7EAF48
6DE5026B29A002018AF4D5B16BF5E100CA5BA12E28B1945B284949EEA5DC26D3
4287E8C355B2AE68C4EA0875C75E8EC88041031B5F1A0F3FB3E910AD62A004D0
C54E6C050F70007DE52767A3386E3DF2DB5B83CAAACA1D05C73185A795476592
4C32E3ED1432A230F5ACD7962E4919D270FF58AC1474312AA6A19F75CF9B6CBE
7BF0C09561E76F6499E69592C2B2C6B4E13312B19D5339EE83188519AF08A639
EA1CD5A76C5B330CE08CF9AD695C83774AA89122725F95B3F267FA73F7F05A50
BCB4AEC58C97D8686164DA8ED051DC49963EE54B3B9A85DAD0B6522F175A0E7D
DFAAFAE76F518C30E46F3A03B3A63F382534ABE524DC7BAC9C949AF5270E8973
66E1615683E45104DABA232C53242BA6937C95950FEBCA235299214678B87716
E319D5FD4543957507DD3D0CCD78714E703B78477879D0A00697D6C7850472A0
6BF2D41170BA0663AAD6092A71A1B1425F3E56CE95D9ED31C789D73C7A6286B7
7EF900F3C8D4C4344DE93E43A5FB51DEC1F603F5C52BD39596BED50D12AFF187
37CBDE76BD499BE8CC9682E624385232523A6459A50F4067EE26AF97D77FBB43
6A8CDF3DB7BAD1C70A05C6957A1BCA86FF851F315692B7EE93A9676E6AE7299D
D7079C45329563749D194BA57A6E320C1E9E54413B189D85964B1EFEC2FCD04A
34897BE0A352C5F08B87E40418D8911205E9FECE9D888E993055850DCCD16A1B
85FD85E6448024DD4E9985356D98C23CCBFF9A2450C521EDA8972568FA9D4ADB
1B3CB9A48F68FD2309296A39C4E7401E779CADD59ABE2D42E548533C317541D8
C800F0C51F31C9F4D5D40CFE64DF17C62172715BEF1FD4EE25E78622FCCD025C
A1AA43924C47124EA9C2BC1739E73CC63458D597F54B655C5297C91DF0A68E38
26D2C3D68A0A6FA51E0718505AD9632B9E26A78DB168BC6CB298A2DA530D69B1
00EBB116046A452CFC7BC8F7664EF8419D266558A9C37D5A113329CC25C95AB8
AEA5509A88623197659D9FC1FA6F2942E1DD3AEAEE075C3735E698F2E53088CB
F0851C3328C71EFADD83A178370A12D75CB81B1F30C7BBDDB333ED8E6C06CF74
D11075A270250B9AFFE3D8DD99A32A6FAC45EC8930A4D23CBD30811B4DA80D2A
937C9714D9D773C3C1A59BAAE62609B6FF35ACF56EEAB3743C5D8F4D8E91CE76
7612DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 34 /quotedblright put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F966977BD8C8D07FDBD
F4D058444E7D7D91788DEA997CBE0545902E67194B7BA3CD0BF454FCA60B9A20
3E6BB526D2D5B5321EE18DD2A0B15E53BCB8E3E01067B30ED2DD2CB9B06D3122
A737435305D42DE9C6B614926BFD44DF10D14402EBEDFF0B144B1C9BD22D7379
5262FEEAFE31C8A721C2D46AA00C10681BA9970D09F1EA4FA77428025D4059BA
2988AC2E3D7246BAAAFB89745F0E38580546045527C8779A254DB08DCC6FB9B9
0E172209FBE3857AF495A7F2B34BC895A39A30F903DC6E3202D29AC110D868F4
7184CB78407B8B9D42F6375F67FD4B828592E4A977B9E71854D143CD1A9EDCD1
767CC2929E071FBA4C3D17500E28A23F697B5D5CC68D5F56EAD14BD504E07182
3FDC12F5404E74EC1C02AF00C1A6A17F958770ED4A024F5B3644DEFB61F2578E
56013D0B4E7CA3AD255E23DD63369A921D427EEE0E098E8148B16E8A5613A8F8
A5F1099E15AD16EC554B644DF306F0CF3571055A81F1B464529DB49E919F88E7
581066BEC4765E31BBE28C245BBF0B74610DBA30C63A71A4F3B60593A6B41C6C
636C980828CFE9A3362FBC02F1967F0F770A4790F90DEF9D56E0A76B0703FC58
2841E6E8D984FB476D4FEB960FFB6B386EC6CBB9EB83704B0AF63F38C77090A8
DAA165E6C6BC86601B14F8E9F504A9D578AF05128D8C1BCEA9D21057958D5DCF
63459352EAD6B4A2A666CC5D85855641CB31507F9E36680ABAEAAD15FCC0DE88
213B28CA601D37EB7C5F82538FD8D9D5C2EA061BA38836458DCCD51D0690B9F4
2B9A8ABBA47200F469549C5E2F623038514ECBF6A26DFED9BC3104B7D31460E3
FA77DE5FE1C647162C8C4D4CD7CAA80E9960B4A163A1789123CFE30A6A5DFDAD
3BE97592F69CE0F9936264E06D391FEAE0DF5D12CA2EED37B41035B341E804F7
379751DFCD8CB57AB9ED14830A83C04AC3D262EFF195118DA736477D1F39ADFA
6240D4EC7288867033C33F104D9577749E88F27BF3983CC96A5AA9EB12A52200
97640011752A95537049E678E3A13077BF91D9337242BF6942909B36CF2BC452
830D07B497C0ADB175C4E5A961D4C02661D9AF486F5890C8FAB308C7776481D5
D08A8CA0EF7B53B026F212E8DF383EC98F8367ECA287D1831991E891C5721910
8C6CF33F6C182E8B1C4507BE51B4F66126A2E2BB9702064F789B6276A203420F
053073483986AECFD1F745652AF9DBAEEF0A55D0C06684EC38C1651E1DC2F78C
7D0448611C00815ACE4B125EF346F608ECCD4DCDCD47DD7717EBC512FB4F57D6
5665E00639AD8B9ACE1DB98C54DDB7F497945441B8E007EA8208436200C6EFF6
6113F133A4852E5D4D97BC90CA03181D0F286AFD29696EC3C8F5EF9D5857E21C
166E3EDBD897C751E01E8702B3E01F288FC146C0E09EDB6309AD84006614D339
A5C4DAC5DC525888EA18CE93A467032BD535319AE81749F2E8928518710BD01F
27198E09BDAD8481AFBEA96365AAA7E0F1D50321133EE38DB1B704A721B6C252
F0F6DAA767F3B411B27729D041ED87CB355E32C1B324C6DFF22D65FF799F3718
52BD976CB59E0E26F4826C073B2E89442AAA012866B009A41E67FAEC8A11A8A2
66A409245DE592E1447B3F11D6B91261E5C28F2030251A78DEB71E7FE4C74CCC
8570D1D6BA4C90957EDE571E99F0B452010E956F798E69A0A6605C22E3401084
DED3B2F94E5E37D2B65FB8F1EA5C08A9585ABD54B6C6D4E10A3AD8C11C19D53A
4ECDA07093BB22F3F8F476ADE94D47ACE3EB65138E6C8015AB97A1FDC2CB3CEF
81F8C3BBFD5E65E4C3AD4E4D37068DC9E2E7C7A3D497AC8225DC43B9D7F246D7
DCDC7D13B5A75E3498447F39DBB13F01F9D976847AF07ED0CDB5B5A897DCF67F
A93933475EEC852B170C0F2DEB158CE7F0F38E370AB7028FA8BE9611748452E3
69B5DD616530A188C69C7A3A66F3F424B957674D054D494A6DFDF38FEDDAE917
185253EA05EA182D038AE1BBBB964CF08AD223F9FEF748ABF8D3DA9264D3018B
0B55DE07973ABFB1B1AC1588A7EE5FB1764993D9385F9B6A00676C5826C82717
D87203B38E76A1A6F5B22CA77AEDD28F55003ABCD7AD226B8A77B99D67DE9F00
9EFA3AE0CCC9DC112B258D7E49A242984E276E2809B85D562DB47454D3AAD7A4
6E890D06A6A3E23171C99B3A1758868FD76D4EA833E54CAA29968CC063B972F7
11C35A311A384F5182CF1DF8D8AA631694A079689734DD6C3D9E73620C023CD0
4F3BA22068DC573A000D2BDEE430E5BD8121B99177CE87ABC5B92DAF112812ED
5159FBB78169D677316291520D63783017F4CA0162D04C5C36AA1EBA51065A77
802B2DDCDDB6D140CD08B58D79B6820B47636B5AE4CEC34D2C490172642D940C
8993D89BE75BF666E9C51BA239B787D53E794D36E8371DF71B39A2E0E93C7ED3
5617640CD45DF18C827FD2B97905D7ED434E936538CC94E5340F6F10603BED7F
96DB5CD93BE18678E04621334AA471E2ECADB703837C80E4FFC0F530929D8369
91D788BF06EB1417DDD5FA5E0086FB1073B91725E875434CF2DF09E96A4BCB35
E0C6CB908E2C1C01002734AA4EA76B709A8056C04562AC5FF1A09730888398D3
ACC0461A6F39A3062FDD666992C67CFF2713492F79D5EF7A4B7F483F27DA7199
F488B3330589B6D4FFFCEDA38A0A12AD91EE6E286C8A659E7C84AF9BCDA604AD
4A9E2F42171F994DA6696CABE4942408C8C46FF2E3446A4679F57CF707C56109
B1633ED05CF59C45EF736720B0276F33E2D266B74B8630D421F5C910A828C53E
A9042AF85E1A166C17E761EE359B78B932B204A5D4ED42B889E74F51519A197F
7D3F613B9ED80C70E800966567DA29CFF103D1F1D38EBEFF05E6C23927B9F04C
1CF16C957AEA4BE0DF8923E45BA0AAB1AF6A94EF802C334DB09F203873028DEC
F5E1D879A766B148843470AB6B3BF185E27467C37E51AAF7D1FFBC72155C0374
65D6BE45334AC77D3EA45D6D057A2A55715A3982CBFB0FAF27730F7303E6927D
41C8B899D2DBC4D90BA450862716B72B2E26832113568783B361725ED6DC3B69
81AB7076E8BA3482B42955F1BA59AA798766FE953CCB24BCE0029BD60AD6F08D
08DF5F3B8E20CBF451923BEF89D2FD1A3265520F8CC2F4022548B05C0B95C5B9
F7C733240965BE759C255131BAF0F989F68C47AC9C0C139205447DC68CB90B19
9C0F57BC3B3E986EF50C34F3D97D12D0F84A728391FCD30AA20AA14B40FC4404
C47B3171ECCA7D4CFDD27E8A3957E8E7B8DD8E61749E25FAD33EDD014575907B
2FAF88E8402383778FC4E19EA6A24BB4D709D3895E469AFCD11125ECE30A92BA
7C24F7738D1A52847919C9A6BCF8E100425B42EA66F94C6183117A01DBA3E8C6
42A7C988CC72B46C86AE8E16FBE300D75310903C57D2E6FA595719397A4F524A
F8655FE566D870B7F9E79C70C2DF913BAA8E0344A1CC14FD5535C929D7516945
019E238E094FDADE5215F4B6D1E1395D6915B7D48770CC033BDFD2D0CB3FE37F
ECE397C8D818BB9E1B56FDB786511DDB9CB052C2B02AB8BA9C78936D79BB6854
0DC6E9A086E75C1CEC9C1966A9A6F82D2DDDA767E24B8648180EDA5B54735530
12387A4D4DAE6DBF756825E9F5A844B33839348A90955E1CD25BD4F773C28F9D
497C11EE577DEE160606D307A2929DC9064757A2705F19B5D03A98A4EF8955E3
5237BACE42AC0027086218644EC529E2D601367751B2B96FB7F0405633EC24F1
559CCBBC5AB2924BCF39E858C49CA513B5BF0A07122CB1629BC0B2805C93F0A0
ED5A9F7FE420E4A7B450AADF9014AF0F4B79CF49F4EA40082B9377EC9C2BD150
054A35D3A33E0C34FF5E4A200FBB7447375403A6E24AF34B3D9F132E44C48062
BFDB30031948531AC1137D161BC7E7B1370FE64368F42CFA77A397689007AE1E
14BD33C6A761681CA4480E5D7BDA9D1FEA13A323162CD049999F05C80AFECEF0
FCEAF00E6EB5DFABBDDBFDCC965370710F18B0BADBA1F24315D16ADBA4BB37FF
9137AE1C778120100F8FC8BD68AF4321774F6AB0DBAF606D1659DD8DB261BBCD
A5932F3F549307D7FCE62D14CC2EA47356D0EA0E3AD6DFBF0E228873D6E083C7
6644781688BD55465A0DE64825DC6F56AF042CD3BC5A9111F817F3B992048398
85FE1B3E32EC664F84AE3BDD7A261EB7F762371CA26BAA30A0C93A1785B9F0FF
1EE7DD2C7CDA169CE945350F0FA1E088B7992588812443AF549B008CD60D47DF
43FE73C504FB3C141EA9F7E86414B93F7D95A5F2D6FD06BF60600F2A046F386A
9C67B0420CA6BC0426538C8B5A888B13FDC5290A42B118F1C4502F757317DB3B
B7D7E605A1BF63F1C99AB4B58004284D9913D752C30E8D43C46BD39A05185C85
AE4100BFE402C5D55787EA03E125137947933C4832F16D3272F096922F787D1F
4B17017BE99D57949C1D58BF77AF416B0E796EC7D28832819F22F837B8442931
C66DA67D8597854681FDB9E1A2FF411506A25FDA5571CBC5E5408F56CB916F65
78EC10313CBEEFC572D68ABBDE5BB962DA8B456E34F43004114B54770A27AE9C
2D4FEE623C498B9F477C254FA5AC1C1AE26D330347CD3F2860026A2F587530F1
8F6AEA2CEC2FACA205D7C525360CE8D85C22AABF48B3BE011EACDB88A67DD6E2
E3E29C5DCDADFE539E046952E1B9969BC45802FF5984A35499225A4F7A578F7D
6D59D1F8480A74C65A21429D4D06095F42445410AF06CF30450FCE22F747A065
53A47EF46CE5D7755607241F0F35CD927FEE493B0CB0F845420A6EB1916763ED
05D3DE0506DC276215E6232DB5D4F647FC32B3D5BDAF04D5B687A5F4223D8C18
4C61E1F27B54CA05E061D9B71FC5E57082CE691776CDA370D239BF30E58DF9A6
8078DA0A9CFFC0AA4212102B9F28B223EA738F1309C437002D692C01B31886C4
6B5AE3616E7C84A67F1E6A8FFE1B8C1D231418378FD1F2F63530A91B28636236
9262139575C414C5F946639847B1B621916A965151AE34FFE8D9CB62E0CD0128
B1FC6EF0AA4CF70614044A736F24CA44A9FC3E5514A51909F548F41DCB69242C
92BFB3E03DE3D9F97C04DBE6EF20E61B63F93A789D86DCE4B3A1296061C6EADE
16BF85E4E63ADA45652AB7FC1C8719532F9D10E42CF90864028C02130E578B1B
1A2F55FEB0EA59F2CB8249697BA6A5AE8511B4371894E1D69DF7D59716754A0F
3A40F17866F42BA1E99238A3E1F3513D5F3E4DB0C438FD05584F8BE21230B940
A2A226AE50076C78C8CEE9E1EB7E8C86DE403BB7521512C29069D159DD95CFB3
2CB348A83E52FFD6454E5051E457A81BC3CAD94D890559C9E22965A82B9E4478
623A2952E5F9E30AB45ABB32D6207831B39BDDA0669CDA18CE87908FD37BD79A
983FFB7890818B29273554A5E0F9BD7E15D3635DFC152D6A125BFCAC5169EEBF
E039A30E6E64AD99154059F5AA2A401719D6C2B5B9A7D26424FC2B9132E2FA99
79945C94FCE684270975BB4E11D75C803C6AA47F813922AEB4ECEF57668EB4D3
4D8BD4E978DB5A96C7A1E33AEFF93DB0C92CEAE63520F9795715A0A77AC0A43E
CE67903E3573D3C38D55D3C6B1EEBF27A2059816CDE3969C2EBEA45682DA358D
4F726929CB993B8354748FBB19E14579F8697ED69CD313CBCC24943723C260DC
0F38A6C808C246C5B643CB1A2E88AEFD0643BC8CAF0EDE23A40FC15E2022A13D
472E5145A01B1B61F8F043C5744FD887034DF2EFF7EBD6B207000A973710B3A4
8FDB0582D83A721858B5D9DF78054828D01F4D74B58FBADBBF9C035212EA8877
33AFE287C778A7C5804AB45A919D80381DF278C41A4A986EB6DF58D62B2BD8A5
C1086E442B3FDBABE51480F41A709577F0EBE2C9F5D7771CE525CF0E364279D9
E2D99FC3B90A8467824654CB305DB994CF27D558EAFA34A3434E612473683085
9188212F116E8E0EE5243B57E90665FEFD2C77D4720072E07FBD91DFF9BF3D54
8D683C5069125BC90D9C5CD63A029DD409F3F2E9BF5F2E4E41312E0D0EF6A021
D2A9AC41B0C278B9BB690B1F3A064DDC7F942C8FF17543C53D23072850CBD198
696D9E01338A2350D102854EF1BDC701FCC9F4E824B7BC55B955DD0F9626E2DF
69AAA29BFAF5D5AC6F7E0FF5EDE03EC781F67DE2A54EA9D3C332F3BB3235E387
B57901166CD8FCC845B48F61DA4659A6EDD5BB81184FB06EC8D1C25365D71D68
09C9CDD7C6156F5AD27372F781776C31BE988D75DAD3F850F7E198EC412832A3
E946B567B3A7D3366DBA7D7BEF49E0847CBA11F41818EEAEF5C7D15E77929B26
04ED6CB6673D3B1B596A1CD0867909881CC4AFC4BFA43241063A8E911532D77F
D2BFB9BB9FECC1E84E6977FB8D7FDD3681153415B7DEBE9DFF77E343A83F234F
618014748760B5E9766524378EC1CB5901DF8F1228830418D0CF719D893B143A
2AD1D4E1C8EC580F1A8E50FE9F2315A0588C3E0B8D3B8228EC37DAB320EC6265
9E9C6C55D36A0EB0525F8657C210A0A06E80D6C298CD793EEDD23A714629DC17
8F48CD332F9225F97ECA823104C9E8F4D90E6F30D80A6C72894015C039DCC9B7
312131AC22A4686E7DA07FDA8002D2782873182E421973D10825E3A15FFCB56C
81ECD8ABA87D409313E286A858BAE8F7F57BA614974F80D496DC976EB8DAB105
823342245E036519E56E2C170EC9E702CC9E630BDFE72300C370B4C644078F5B
C5AF0C62C2AFF025D1BA861B5F33625A7EEC07BA9A0C06270711397B6598E5C4
C5AE9BA7CEEE8F3572265364DCDE211E884EA4665A18DA58508C7DF35AD29EB7
60C8830CCA9B6582A25DB8550D2BF8E56FA848DCB5CEC10A563362B20233585D
F85227C1382FD6FA5FD0D8885FF2057EF7D9274A8DDE5DE347F2F5E1997A4A94
490FF3720593D85784CE3227BF1B1599C4BD4281FAEE1977568DD36FC0E2F0C3
D7C16C34E39BD2C469879E0D3566C1453BCCBB35CE74D495C2AB9DD001E6B50C
EFEDBADB4AAF45DB90EE3F8639DA125D48CF0B11099DCACCE42068700339B6BB
372C6B37811CDC087B2A9C79DE92E0D4BBD83739DCC27DC13BEBAEF651291799
4F0B9576E36BB4A16F417402A64B72C39276222C8C5CA8C32AA3368FD26D142F
A4F7648CBBB41603B8C211986B4D827B24D0C4BE3A556AF28D2BE07356984D22
A98AF7CAC0FEDEACF5D92D9DA7D52FB7EBED17B43894750BCF3B82EF17980BDB
3ED3B6BF43D3CDF4422039D1D123561399825339E1848830837F3CD0F06699A3
C308F84D57CF404F274556BA34CB56D17111AAD0CA84DB7CE71F4AE1067CE89D
D98654DA31DBCA7A539F6960DAE36A7B1986A505C3F5DB73FCEDD54D1319C067
CD5EB25F30D723325D4D85E3CA48D0A5CBE1BF3A6FA355F1204B55C99FC8871B
AACA078066F836DB9042F3025E61AE6F797F59B7E3E03404BA3783DC854BCD5A
43215DB9A666561CA40C939C0B76DE3A903098A2136ADCCDC12D90A7CAFB39C8
987D064228E30AB9D752F9E2781F57C5FD55495E994C48BE7A7BBF6932948F03
0C06CD0051C128565E1BADB8A134397CEB2512E5338756F2DE972C2496C26B1C
B3BAC32F02993713E1DC7AC92AB3CCE2B49AE43356D9E3B1AE8A01D7F9F75CFA
71F1EB3BBC399EA962E8B7A15208A78EF4889E13D2CAED4453051B158655F755
D03AE27859793542C2006C941A5FBD7E34F8D4DF4F2708D945097D9D875148CC
153905A7E9EDD59A7DBE2F40542FC0F71B1A4EFAF2A3FFA81E501E5CA0B36E8E
246C2A595CAA4CAE024D69C405AE512D2E82946F0B3B18B7EFC67DFCF9F5F9B2
6274BD33B25531AA46A729EBEB746F251EF7C1E5D74A74B81145DCE8348A8082
379669B4C9B376E5F39626B2F337B32509BADA4DCEC715001311CF7011552C46
B177BFFBF930B13807E610A532D4664110D8AABC900C0A67864883B4825F19BE
8E0BD8A901FAF06A2C85FE01A670D5E562ACCF012568B024444D2BE546A923F5
BB5D59482E5D9CDDBF6BB6012ECEA180B5A20BE20085A05AA5B3ACB812A94706
97DAC323E531EA4AD950AD94C8390D2CD1C122EF5DDF73A48056CB8029211884
9ABA8E39FEE05CF8A667C7CD7ADEBD053EA0F93D3247A3946C442AC3A3DD1194
26954F6397484583925CFF0485ED87580E2D13D3EDE1717861E8C8757623978C
B7BDB9AC84CF9585480F6D0480773C7261047BD27476FA4FB17581A446F62B38
0534C9EF88A124FF0CCE66E7C07C2C7CCDF7A38668B1865777EBA10766687CF9
1B8C929DF13FC39D75EC32425C9FED3AC761431B19F0A0DBC430A5876E073B52
EDF7118EED88221D1A4018E290D0004B1A0CF4BB746B2BA2740D47FABE0AA2BE
D763A9BE08FA7A24C6C184CD93F7C1667A2FA7E370489696525C774BD2B5A490
E188DD2646DB823768BCF18B48C6C7D94961388A27C47533FE6CC90D57918F8A
205D93CAE0A5B9955D49B0909D7222D28C856E491487C2467619C280DDD3A4B3
79210D0AFE349E913A7BA9D83005D8EB86128C504524060DB3BF278D9389FB61
B340AA7C757749311A790E1DBD48EAD6A17550A40EEA72899394B053EA42813E
C2A5CBAFD6431F6E3F6BF54FFFA9E0D31422E4131E8563A760E0175E186DECFA
9E41A7F12E1E09E1A4B01AB281CEF0787AAEA6891E6A51086DED02E5F02DE76D
AAA61AE6541341DD308C030C8B233459B44CD59D88C822BB0E85AF78DE397CB6
818A6A2631AE908F15B9413D1CD6D078317AA14C64B63CE93F688255D1DE5B7A
6B9370C150D30FF39E3D6FE87EE0316AA0730F793D2BD72205A5BE9098E81C0D
326F96CF42C9BC3CB69BE51F7BB642726B1F03710D299A39B2EEAC805CDFBB96
52BD552AF4996163CAE2C51360DDF964190259C8B3C8FA1CD629871AF973E89F
3F300ADA7697950E3ADC2EBFD0B47879D669C2255E8C5F691B81EB578298D8C3
F51703E52C0A5112F242D31169E2F839034FF13D5C84D973CE2D78B2633143FA
7A8307617E0600692F451CAD5C4F27676D5DBCEB6129476368C122CA7E06CB5F
63C5B8996DACB7625661EF0C7473CE6DD859265FEFAFCB5F782F20C18C72A577
F82BFA73B2F5D3908B31CD61040F9187665157C30AE2378859E3C934B13A8971
C436AB2F80464CD3CD4B1F147B8BDC7E1C2945E819736CF72033B08D7C8D9DAD
191074B87301B1FBB2F47D91F7326525735299ADE0B066CB43320004F2EDA1E7
E799F8FCBFC55295078288C8CB75F282B13C463E632798C13EF048D021434CC2
FDAAA29E562F5AF40B4073AF819F20F87B786322109A9AB27F25AAC70A031EF1
3C983FBE400D4EE58648ADE8FE8F55412F3FB7622BD2EC175EE842F7C3E551E4
448645229F9387EBCAF71B718302747F10D687584508CF48778B17A2C68C494F
23408BC509449C3AFE885139F927F02DD9511F9C2F9D944E8FBC62943169D3AE
37CF568F9F01AD0CEBD331D389ABF148D5DC239B58F4DF49CAFAD2A45A3E3574
9669C212564CB13ED1F23B93348E77ED83DBF0779D054F622AE846906218C8E0
7C28097DB5E55078798E95C82AA9274025EED4F6988A6784FC1337DB3EBE52F7
75C95C8E0B73158B2FF20457BC9F7BDD15DBC3FCCC8EF8A48135EB965681CA35
D631CF733D3935982FF95CF6A6E438F5368221664804B06BF2DA9430D10A3D84
86D9779F2B178A845BEB891AD3BEEE6F4DB2B682B4103667B8B11FBBC0C8EE28
47167E843D1C7A7379227E0C2C6DCDB917C9A81951758F9C53A36C177B1955F3
EDA1909E01A336BD9C3F89939E2EBC0950E3F9956891774CF18DB4878A627B96
AE89D78192028DE756F467691C8EB04BBE66A97D243CB77C71509CD363DE8239
C50F968CD763CD0D4AD13E74302E411779FDFDE5E21AD564ABDA75816E624460
A02AB222E7F520E4536563F0272E2BC648801417DE0A1F962D750CA649546224
BE64B9D2578969A82C7AD60119300076917D4A11D07B8AFCE4C3CA20F96BE1A4
B255ED7B5DF89423DD085661101267D61A9794FA030196E6EBB4FBDF606D0D8A
4B9740615B95635DDC41ED66142DDBFDD526146B9A453DDE7233712C365DB52C
6756DCA7CD2C2751708D43023765228C914EE36542A79C17FA43E1AFAD4BDCF4
8AB6A9BCB8C7F418E31F8B0B6059E6DC623B5BC912EB7CADB86D32270EB08811
C5450E8AB1067D9F76BCB2747DC21B25190B958183FFB43AAF0D98ABA923DE17
B5CEA95C9410A50A5560F6825E29E0E31E6C95BAC6B41C07D9C243E07ACC5956
41713BC04F19E317962A33A546B39BF267026DFD10D55885BADA01E84871FCC2
2E55AC8E7A10B350927DAD3EA39D8A547A584BF8E20EF22BE1FCE943590861C8
444ADAE349B22DBA7BBADAF753DC988158A0CE3932A22A5B93D8E3087F50A23B
8FDE478ADA42D732922C92412E02FE0474A0231CF2E7119483A8D583C989AC2A
FC33147B2089BAB11CBD0087BCB6B49E91FEFC7CAB9BBE0DA2A9F7CAC4926575
89B114E1FF77EAAFE6EDCAF686AA4DC6AE9D7D1554BD46662F32C9EA57E38D2B
BC63CFFEAD193341629E3674DDAB9A0A563EB3809CE92CA6685FE469419CD6BA
F49BD82FB39A305B12A546BB1D4C9C01B5BB0A13B4054D8AF9E792B19479717C
6315071D06775DC6D42D02997A1D525320EBF05537E6BF17B44201577AE757FA
F32956410CA6AC7B1E1FCE16EAF2FF3C8ECC3E3B37D05EA65B14FED4986C0377
C35DCD05F63F6991A0E9EA21D6D766D27A9B01D31D1825DF6E67819D7D351931
751657498ADE5D0BE5BE2B34361B56CFCD39432BACA418B97EC428202FC2E760
E657339A54B8C05ACC40B7AF9BAEB75DD6B5005C0CCE71C64C1705B50CBDB4E3
E08ED7B8327942BDBB4CCE609A736EE8AD226F0A1D3C28E56A530EAD44DDFAF9
CBD813748F8A43ADCFDD4925A3A38458B0418D2125E61E44B4EE953ADCE89124
3411ADD53AED78469B1ED657FEC25AB4C6DCB1A642BE82A2C2D8420914BAD3BE
8A9BEFF4F6F20C1AFC48881662877C3B4A3CF665532ABE0498797A1A6EE387C3
2FFDB92E6A62515299D783539354896E7470B7A26237B5E3AEF77055280217A2
D8C2EC5801AFB1E402397DFC47BCC9870D742E9ED31DD65DC6E5EFA90EBE9787
4E65F3ED1EABC8EC8D344E67A79A40CF3F07FF1C9870B9C3D10CAF59843C6A0A
E4AA6621E0D430EF94F3A631538289DB382AE4828B510DE3ACF534E2F69686F6
C67C94277441CBB39B07714090591F3AB24EA9F06428EB2B1FC26D1074023418
5FA75911C65BD371F2C48E22351EB11F9F277B9D16CF0817A69766DFF3BCC6E6
156F01B628AB00B5383CE6FB55EB0CAB6156A2679433C2075D34D0FA70AD84ED
47CB898937AF60A411F58B4B2ADE57F39AC614C68826D687D5FD829B911D53B7
0D6EBD12414D36838C191B459EAA6BBA637E1A7520AEA77578338254E5F8E86A
E47B18C109ED67904DD8CE0E037B7C47479514E74668970E0405359419CC1BDA
D5F3368D292386F114CB99B5C0661E81A62919BC32A56B164F6CC45039E00CF0
95CCEB75F2776DD6B74CDADD82103B019DED8CDD3F4B614445913762E8EC2597
918D3227CB5D659645FE9A2F08BD23AA6B8692C8BFC8D065AAEC6A8958450AD4
9C8FD534C3075C63E80CE9F5AFB0301F34AB889B779E903F885C14E98D3E1135
2075D9AC4ADE68B434087DD229E78E1177DCA2B4C7D009FA5F09558B0E30839E
F860942797A93FF6F03C07DF4AE492EEC75295B7D48C2FA6AF0C4328870E1851
F5C962B8FA7D85B3AABEED686D1B4D4839EECBBBAD67429CC13390864A38E351
9E6753C5BF6D5C80C39941DD9548F42FBD6601A26A6A73EEE344E224825A02A6
4940298F28EFD304621241812EDD5629D4082A33E0DD179FED2546B9DA5F0DD4
708560B362454229A47B3A923A61575DC3F1B07902FC8D815C2A4E3BCF6E77BA
ABF1491141241D0E8F516ADD88155B7E45B9D0F183B9592971F355E2B20AD4DB
3371637DE0568B5F462BF52B48278BACD256BD687271A6D65E4F405C5574F9C7
5C6D6CFA75E5F22EDDE0F9F3EFD35D842AB14DD2975EA7FB458985D47900ACB7
300FD1EF359C4ADBD8085179BD9DB01317F152308283A3E3B6A41E143C73ED90
48640EBB3CFDBB3E3245C7F67CD2E5FC7D70040B85E1193F176F66BD6BAB4C85
85808B92EE299BFEE952956369DA8DA78644F0AB3A33246136EC42DE7A926877
9042A6DDB5236A87377A7F112ADF14B2B8F09869540C85F3F987C47C26A7A8A0
00975FF28A5464D5291E46735CE0B14144E58C1DF446BC55126EB017C3030CF9
3F418BE851897C4D964439F224B52C51309160F266704C41ED13793127ED3555
22334BC90D428540DCB24D6F2AB2B50AA3990A68690443AAA26D27462C8BB785
8E01F0C590ACE733AFEC4857B2B0A424ACFE024A86E5ED58622708BAF049DD30
C986A8B7277869EAD55980ED739D79268CC86525088BF06FE8E296F237604599
C41C72EAE4A38AB8A6F9B5E922A34153A67FAC7C51FF6AA70B64B7B8A14544E6
F70195FECB9F2763FE20E91359BEB71D3AE1BC03120A40108501CC28174DE788
4EFA93F56AAA4AA8CC65A974D681E647ED2BA696443D57D52448466B7EA091C9
060238A910813048672BA9B83BB421CBB1035E026BB08335D8EF11173A2EEC71
B1787BFE6A3E9DB2A82AEED8DB05D0FBEE94B8700570DD5BB81009B89990EE38
7DAFDBBB5FD659A858BFA653983461946D66CCBF8658FFF0F78F3FE543652C16
511A9416C91D5832F7908271D0776A33C60F867A2E1E4ACAB6A55CBA27F52EA1
0A0CEE4B16AAD5E93E5D96D29A73F265F9355FC82B890A103767AD9F5E457830
6BAEC94C68F4DEC01A62FF384BCDE548739905E2D37CBCEDED615196F2E0A562
361F4B69432F8728BFD2BAF67B7B0B16D64807E92C55AFBFCAB355E46AC70C27
10651FAB757F22E16A8A766140F9827406911FF00455FDE8BF45B26A533025C5
F0753BD4B1052248F927D10609A5534B424FD65ED974442DC3086CB218787B59
6249DB349189A41FBA581041552CEEE5C2F6A5A65E7F8213DE32EEA45333CE00
7BEA1ACF094090FAEF93EF4978CD3D1761478C11E7054E27E90D8D89C40B919B
5386307FC3D262F0E245FD6229819900A0F65CE1E32D8EC7CBA2A88353AB4590
571BE798411B8E2A419C06F655FD9C4723C7E7E0783ABB7775ED7FAA1F0CFD5B
866EE2BEB89378EA283D3A4095883DD37C5F2ABA277F3600C89898DDA6D8A4F7
6C9B6D8A65E8B1339461C9256F90128AED0BC504F847B00EB1EE93DE439DA071
5437A041330B88ACCFC4AC1272DFAD31B6979E525EF416305C599C9A3EAA5FB0
E7F06B18AA5B2B41EFA5CA505E65E6FC465A73394247F38CE2C00F38C614A523
D49EA662A1F43D6C2F8351BC66B858C0CB3EB67468F7371FE78053F210F3EC8C
74A2C29399F3B095D67183F238736C16DB30BC30BBE066BCEE218BFC4B5EAD79
1040A6891D604B71E8D858D7C5214BEA503BA46ACCE64B053D1BE44313B5BA95
87E6BB80B633475469A0CB576AC7D3934312CB6A8C0205D2B2BBF43BBB1206E5
0F691CFAAA1412DA5018567577B539FA7930DAA9976B48F88D0BA2134D071E10
DA454D0E8E340E854481FE450089E42C372D4C306DC8FA5A3F1ABD7DF653AFA4
AE0365DD81C2F7F19D5AAF7E7A3F64C350897CE7B025DE404BAE05B279D24F89
362CDFA64CFF111A324B9EF8E41EA9A02E00621357BCD72B2F4942FEED8038FD
E13DF4118B4F8B993F05F7C6974637C6C726DE8D90DBB5953689B541EFD3EEF1
4E683096CF58F7DAF52986C37E40FD9AD944B969E09A93E694978B542E489377
CFB37AC683A4F03ADBE983610D7ABF6D3B4EC862B8CA0931395544D40F4AF68A
E73C756D563D982A90B4F38B63272F9551A89803A0A289DAC1383DABAA96209E
B976C09516FE70A724BBF66BC0C27D1CC437CA6B02E50BB0516A455D5ECFE023
2A4B148B220693ECBF71C8C18A7906C7FC0C5CF6A8B0A063699B06C6DEC3E848
80EAAAB7EABFA518E0A384F94987073E7AFEBFC3544FEBB45954797AD20556B3
796AA7B3EB41E705D29E4FEEAB2D76F69D3BCCF47D10C7B14A8EF6C51EC538C1
C68FF6BCEF5AB1608506CC2C033E540DC3403D4D9D9981315108DBBA8B8098BB
228924DEB6B7BE94B848A4564313807D9F7555AD32C3000E2EA58DDFF21257E3
80846349091658004FD337217DE23B52C4E17ADF8675FCC98C68CFAC5077FE51
181670E0C16E5CC90996AC48ACD9EA38888DD02291C6C9A4C9989F0EE915E69D
597B4E041E5810D264E72C453342D7BEA1AFB0CFBA3B5CD7E49358D3D9F30633
660D41A4D7C0B433F0AECC16CB6CACF3447DFE2F94CF44D7D2244B8D721C31F6
A72723CFB16A3C3EDBCDF166B6CD5D25DDFBA68C597470143266F8491DD68D91
A59046E97E7460B42D9F906B781E961942A4D588D4E0A5081437A357722786A1
EDCEAB292982D8439668F7BA1566CA736B1063C3721DFBE5EFCEFE586D2D3E59
D041C0912AA79BBE250811A4F07170406556077CD385A5ADBA30CF79E696CC84
19788DEC46785555331AC321A379314F6E578303408D563EDDFB67F8CE90E98D
BB2FAF6927FFD37F73792106AD6746E7835D86B2E1C0AA10EE7E0FA27D933AC2
123CFA532BEA85478D0AC1F557B37B3FE15A7591CB5099318D892D7A246E52A4
339FB129CA5E242CA9BE4D9CEEAB2B327F8151056112F4FFB1F82B83740FBB29
F2CF9821FA4B953D913A9182B449166C4CA41603B8F52A9C0C91A75327AEFFFD
C65B3468D6AAF9E2B81FB870F7A2B4BAE7E0C0BF54FDE1AA45BCF49FDFB3C0C7
03187A2D8D1175EB132EB75E60CD039A74663E1C03CB8F93B8843016D31F86B6
781944D053E2EAB1C8252A5E1C05D54CF304D7E68CBF467F6E018D59E876EFCC
ABFAD290A4055DAAFC0B560F7EB76994D357D164BE8C48F90738976E8EACE5F6
6100D580C601EAEDA21945BD97889986A83007B5D0F87F6C982F837A77E7E31B
C1A4991A6294B1734F5B85CFCD68492181412E0F9B7D67B91847EE260885075D
B8B3123400933611744167D2FAF95FC87A121ADA4B9C0AD2EA6BCF4F5CE6FFF0
ADC6CB1172B26380404533CF129125C3E266EFA9BCAA3252DB7B6664ACC2AE87
5AD2FDD52C79D4BD62FB4ACC88CBC2A1B2320455062DBB81D469A9D6B46CFD24
0A45694F89FBD492818D6A6C464BCF2BA962BADF768F8424F71C1F20F0159451
1EC2B54029F50A5B7ED6DC6441DDE6D096BB5C864271C7B7A5514E0910B195B0
F4FA462C59258D33AD3502DC75079D5056EF68A3BC22D80506D3AFD91689C3BA
75C9BA89C87F87B7CFA678F451364219FD210025F13BF2EC4FB8B9EFEBE25597
5745BD79CE29379A2EDD396A31CD4E9AE17679255E30136FE290001E96C8AFFD
F3A6A2BE24296EF537DE50479D5BA2B268D59CDA1D819B442DB3302BA1D3128D
5240B7A50D8B7B7AD56BF7746E1F9297C8028099083A35905DA87E433D5CA15E
4079F81EEB69D06DD0112D57B3F6E4143F45F57FB1DE7351AB006B2F7032FBFA
A4F2E37286E0CF8DDDFB7BB57776105F8D7D2EB41BCD47C71629B56606CC9635
A61BEF1109B757E6A57AE33787F403A02EF023EDAE47B9F85B7C57ECD4A07058
D618AEF2B6FEE7D92D18D4B6C8DF3B3F7C7EAFACE1C86E61582078AEDA1F0C39
51D2E3C745610524938FC748D387D18B73F59668CC251E4E46B44F46F4D51E18
D3BB280B473D5B6DBF18F5AC9BE35847D8205457CA424D4A18C6675C0E560076
72F818EDBA78BC74A31E1E9C2ADC9F4552B353C6F0D29BD6EC308E1373ED3743
B766D9A41AD680ECE6D1CA830847F92B0CBC5D8322A9D341101B76921AD30F57
9C894035FBF4710956FF5902F7B63BBE3B6956BAC8B65CC8CB6851768843A1D6
52F6D517404038007117FF3B9D5CDC130351C12117AAB31F91CA4C0FED319B5C
BF14C78A62CD103D7E080E72899AF0C8DD8E8742B741A154D6D96605E36BF13E
C1FD6408FA0DF8B3A031049E46E1C6E3B01DCC1950735CC52C634DB6752C8A84
4B15750A1E417DE7AD19AD226FDC83AD88C45FBCFEE372C2EBF08FDB7D467045
34312535192B229FB4ED0FE1EBAE74690040D6ECB661480D86B50AC3C2B0F10D
0132F26D4C27808655C8CC6865BDB0AE45FB1DC2ACD55C2ABD43624B2FE7FBB8
30B40B779382FA80E9E603B2303B63EA41257956D5E21BE2305CCBC462736D10
591216E1D570882D0FEEAB236BBC472DA03A57B55305F2C32E4D6F36B9A60494
99365840D61C2D90DCC119DE6C1DC22C24E7A2361F66B2240CC7BCD722D12D41
01C83244266526747E614A885C461C0B05150CA97CC595334F0AFD94837D4369
C275148C510F51311B3CE49ACE815B841EEB54FE89F12A7B95F47E01B2B9989B
CC23420B05E1244BCF24D6FA4536FAC34C0D486EEBDCB032761024CC8E9638B8
1F78ED1C2FB4A9DA5AC062ED563F9017BB345D68A42E99E8D22251648BC3D100
67822AF067CF2745BF2EC71C03F92FB0F4C3AB234544101198E661553ECA49C0
61DC42A0C3E6AA22D278944BB5990D172485BE3F26C290A56F6448797DE5916A
D2C2110B7ADDDDAA8CC94F71F0F2BDAF96901EF91C73389DBED81455C312C9B3
E73E430EA090C111530EE32D83EF04E538831DFE6C6FA541137CF04D96973F3C
30B61DDE400704ABEFF35DF42681603365EF8436E5755BA284338C73E60963F5
EBD52F00E97682CE79290EFE00776FAD1939D817623E27502C492CE429300935
D930923F4F8DA6DC43A6FE04BFCC72F913F08A0F8585835F616FB5660DC7D312
241C48C47AEE7C1869763B46EFD349165DC8A00596B5F45F225F9683F0FD812B
B824DA1A1EED8DEA029F7C7B65395BA6A42552E5DDB08A3F7A9CB674B6F47754
CDF1EC5E0ECB40041C7F073EB55AF9FE41FEB60D62A3A6BF8BBA40144D6F9C7A
C0A5D43561502242046CEDA58C654B63346BB51DF86358D83000C9628B543E65
0EDC04CDAFF03CCAEFEC1CE8013B1CF33446EF908413E0B4D764120FC01D9C3C
C0683A19A853B8633814B6D4629786BC2493BC39FC4AC3BEC85027A21A926AD1
D9A027F45BEFAEC0B170255920931622BA9000F281DD793704D86CCAD3B8FB20
514A1021411577CBF8DD164542ED4D155AF4ADC74A2C2388724FEC80CB17128C
701B5C3D25D2EBDAB593ACF4F2EEEA7B6DCBF2BB652A23D6351C719A6F60BED3
EDA019115F0BE25B6A2AC043A40B9FBFA7EBB25BE00DC8729B434839C4AB5998
33C5D89AEEDEEE6D3EE552E714E5016EB22700368B4595
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /numbersign put
dup 49 /one put
dup 65 /A put
dup 69 /E put
dup 75 /K put
dup 97 /a put
dup 101 /e put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-34 -251 988 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
377D3061A20B1EB98796B8607EECBC699445EAA866C38E02DF59F5EDD378303A
0733B90E7835C0AAF32BA04F1566D8161EA89CD4D14DDB953F8B910BFC8A7F03
5020F55EF8FC2640ADADA156F6CF8F2EB6610F7EE8874A26CBE7CD154469B9F4
ED76886B3FB679FFDEB59BB6C55AF7087BA48B75EE2FB374B19BCC421A963E15
FE05ECAAF9EECDF4B2715010A320102E6F8CCAA342FA11532671CEBCA4841EA0
A76AAFFB2EA9C1DD4C74D4F172FF75A11BFF79EDE00F17AD2A55873A176D838D
C5CA6EBBCC2FD42EBA0DE4572FAF5ECB34607D9F3458016971A45F8309342E06
8C6EFA6F41FE70A33727A91F97BE0AEB5E28F885C286FD52B6EB7D616950F072
84FF9EB3211583B80A7D724718C1DBCD19B0EC7C3E500050F9F0A2FD3EC71E8A
A62CE9686D42C97DD07D16207C6C577244B81453471878630B9ACD44F34E9BCD
F183F323A4A00FE0124CFE4623BB03233E9CF1A8C063FF977785EF99E32F1DEF
FD004E3F2765DFF9C1AEEFDBB99A04C775F2677F6D33C939FD2DE57E89EBAF51
493C74624BCE132BCDC91FED1ECCDCC9E82B84A9C485B9E6EAB1C014883F1374
E2287317E33C45759EB04708F542DC6CED80B925F1196743FDF78BBC60B5BEFC
00F16CA5E885F80538E6EFF93C61994FD6F86C26D36C5290D819722DB1017589
4FB5EE24785B5A381AE11A4BA052DF0A607FD9024EC84C8CE31216FA929BA325
CBCEC0EFC5A6780DA1E78D03A6A8E1AC51DE668E44685E379608DA098793EF46
426995CA8F3E03978A50E23D3FFDED48145E160CB2EBD1CCEE3D62EBCF951324
86848AD7113D94325D292B06FD53ED447C7EEBBD377A03E1A75776076D452AB3
783B26898B3B58D2E9C207BE79822BABF2BA8407498741C76393E11844CF9C1B
3E8BF59279EA78FEF58674F62C5657165886E0561C500F6BFC462B16BB63F435
316124E5632B063652D14FE4203CD32A2E32BCB11E3877FFE2155277F009F567
7B0EC051CDC90F3F7268CB6D42230A8635F1FFEF4F1764A85237185B7503A4C0
20BA101F691977CECA010631A1CCBD3D32C4760F46B845D2E80D440196542834
89DFD89870E2EB69B2A842E98BB396B5ED55DCB401AA44A48B82CFE2562BC938
35392384778A9B2646079182E2387B748B775EA56D9D24360006C457D037F820
A0F30F5C55AA8E427B655EE78E18798D843051E7EC40C15CBBAA23BD9F751BCA
47451CE8128DF50BD012D0F41CD92A4B8CDA4DF538477E345D0E1D1284E6A876
BD2DBAE9CA74386E523A3D24406D0330DCC900B865C26B8AF7D1C8469C84A1C0
D71543853BE32B522F7713DCE88E5A07870E715DE74275FE94CBD282B7CB1250
726D416DA268BB77C837E71BDB590FD66B0FA275461E1F25796A6118F5AE4597
E09B5452F5A88237EDEF4B57F19EF97B1BE9307EEE466505ABE67AD61364541B
617068E7AB884AD71D1E4B616A957B32B933D1A7FC98D322FB942A8695ADC20E
32A753BF64C1AF7338A73ACE800230387526DE8BA88F9F4E2543083BF06D4E89
AA293939E43C57C31C489D6643B7D8F95EA82698AEB12CFA65239E3A9320BD89
7F833DD6A0CC55C00A36FE5C9B6FFAEE07C192E01F3C59F39BF17F3793C097AD
F29088C089846BFE5D47BFC4486F40EAA99DDD95F1991E1CF4BF0560BCEDC020
FB8D2ADBDD69EA9C47BDD8B039172700663FC4B9CBEFAE3B26BDD8475D531249
89C03B257AF3E98FE019E0A5AC72C701BD490F2B4B90498D9056B7FFCE370AC9
D87C926CAFE7126C375D261D1F8D4793E4B375B5B0622FFC71FD6BEC44E1A4B0
C2229702029D0A82FECF2F16454130B6A1B1B211B2E2FA937D663137F3B5CDA0
407598242DAFDC48135B401DB3EC207849F3C2DA4130126AEFDFC5D276AA4F82
F9782D030B21A48100CD16CBCB72D892AA93662AA3835ADAB08B9B691C89B598
D7A51AF63FBDFA400D377D9DB86EDA3206F1086EC4B30C6BCB8303697A69ED66
9C8A837784158FA160057B6B65E6C735AD236241D1C33A46615F39202308B3C4
6F53137A11F46D8714BFCF0E1438C2F8374ED8E06EAAB2E6EA7D46235CFEBCF1
3D7CC217CC6E2E012B0FE713CD3CDFDA03E9519ADC8E876BC71253DA8BA4C640
2289F7E929265074791D985E6327A8B61AE57614CC525C6DCD9C5B7F96F76162
BBE7166A803183D86BF839F0C1F7351944BD92442E8B40E351BDB4562BF3FE91
39FD82541FA525A204FE790A6D2FBB2CE9AB449673D11788470D34E3AE8DCD6D
76701CDDDDAAC16AD944592877B1B4EDB2ECD7B46C1E969A1ED878C9FEC4A952
28FBF73A7FAEAF8756516B459BCFEEE229A6EF14D01F2DC708338D023C067E5F
3F3E4F018C092E8DED3F284D3E28B1172C9C0114F6EBF24AC2C8480217473E0F
964A6D7D434B2B3BC85A07EC6BCACF2B5118DDE928C39C1FAC03AA47767F01BC
EBAF773E15C918E3A41FE80188354E0D5995347A8327393AF03584DA1A7A058E
E9C82A39570FCE9789713114A460FCD3A456DAD04408B2789D1320396BBB65BC
B82C625A507F3402B6E6B04131471939F56B3345CFAEF85E0869248C5F587121
49153AA06F8979A61D1F88824CB1940D645676721CAA5FE85A86CC61A3090E28
664FE38A0F092035777ED7E0C890AB6AF42AC1913D39370282CD860D9012D7BB
1B15CC203F7D6933DC6AC91EB2FD0777DB87464D1AEE220BF26EE5FED3D72E35
E42BA06F7230890FA8BF7E66A70B45F779205CFE0925E616ABF7814F241660B6
D4D9B464E8B4341DF8798FDADF0998FEFCA0E40C09101653E034FCCDC21E4612
52D6689F7AD6156CB6215A415B1BA73B5BA0A24C0D2D5C27B297A0DC7FF0E079
77A38FD81881B2F7B3684320AC1934CD1783A4246EF44BFEA0CC7E11885286EF
9BF08FC8678565E32F45ECBADC33B8838AF503D77F18B54ABFE7338978DF687A
C59F1C7723CF9BF299E33F71735B8892D50583EDDFF94A7D6036CF28BD5ECEBA
A36558D22ADBA7805B4C92EEF1BE4D724C3551C0BF8FD57004017C9159FDAE1C
A61A3171110DF20D277B853848C469D21C6D988D2CEE194426F22F961B1FFFE9
C1A687D150800ECA3D3D5E91E1D588446290E648BD5A5435B4FDE969CEDBC28E
61A347BD2B3BDBA3156142ACDF4DC9B616A2C1942B0B5D96BF8E3DC77DBD0A53
A45B7427FE9E440B753FBD994E7ED2D5CD9EC7D644045FD830B3AF1E08D43FD8
677EB40A1483E2138C96C50BB45620C0B2B63E61F2CE0DE48E354AFDEC4FD3F9
1E40283A0C44BBB369F8E31FA8466156D28D55C28FA0EFFE60005FA72C994E7D
83ECAFDF20BAF4F38CE0808F0A37FF758AFC7E5D00AA86F2F31D017CC42ED04D
EB6BB211E2C80036009C865821DBA8944B0FC021A76A32AE17CE29B79E27D500
688C933AD5F9D3E53531FF9470E98D3978FC6FD19FF38ECA5DDA7321F8B01998
E6E78B406BFCAD02DCD862A47E89F46E952F4CFC0CCDF53879C386E01E130C40
C2E2F8403F7E3E39CBE39AACDA09E5CB6443B7238E68C97349014EAFB3D03B1D
C499D01EF383E1134789E3928A5DBA86D7717E09A88486182FF0D71C6268E90A
D22ECD93A6EF14848F0B75B7E05A391E9708F6F56D46F9783B6A42BFDD606F6E
F1990394AB476542CB30CF04ED03FAE035A867B5020632A2F88333FD44801B5F
E5A6B517449FE3DC82EC2453FDD84899C7753A2350A4DCAAB456F5DCA1082C5B
0842739C6644EFF1C3C551D3944EB2DE7B5532249D2A6D822CACCC283E79EC4D
FB049379D4292FAE41E480526E3C30BDCD4ECF3C60826B7A16BD584FAE6DE135
0E020B5D74F0828B1F1F4D8741C2D95418FE4181115FD3E07442EAA2C7D23BEE
35B68832DBF1F6AD659DDCA75D8C54C7E4796C85829C838E0F26AC88D8E8EB05
A628C8CBFCE228392D49A85021F3217BF16B082547E9272CEBEAC439EC9F17C9
72ECFF00F4BB9575819DDF6DE6B949EE9B32EDFC8BCEDB06B6ABFA2251E381C3
D0D3B602FDC9E592EDEA81B7DC60CE057AFE6EFFC1FFF985DC670376E0CC1E34
8E7E1F8CB383C36172E8D751559D8E997859B30F72759A9B31D4CF123D0AB306
BC8020D7308709B414903EF97CE77654B46478661C03AC2D238195D28BA4CEAF

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (2008-1.dvi)
@start /Fa 145[41 4[23 105[{}2 58.1154 /CMMI7 rf /Fb
206[33 5[51 43[{}2 58.1154 /CMR7 rf /Fc 230[65 24[65{}2
83.022 /CMSY10 rf /Fd 141[37 3[50 4[29 46[23 58[{}4 83.022
/CMMI10 rf /Fe 141[35 2[42 8[25 38 2[38 98[{}5 83.022
/CMTI10 rf /Ff 133[37 44 44 60 44 46 32 33 33 44 46 42
46 69 23 44 1[23 46 42 25 37 46 37 46 42 4[42 4[85 1[62
60 46 61 1[57 65 62 1[52 2[30 4[63 1[59 62 3[65 2[23
42 42 42 42 42 42 42 42 42 42 1[23 28 23 65 1[32 32 23
65 69 42 1[42 19[69 46 46 48 11[{}66 83.022 /CMR10 rf
/Fg 134[62 62 85 3[46 46 3[65 98 7[52 3[59 21[91 5[80
3[88 15[59 13[98 35[{}14 119.552 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1107 503 a Fg(Exam)38 b(#1)116
b(Answ)m(er)38 b(Key)p 0 TeXcolorgray 392 822 a Ff(1.)p
0 TeXcolorgray 0 TeXcolorgray 76 w(\(a\))p 0 TeXcolorgray
42 w(No:)k(the)31 b(R&D)f(exp)r(enditure)h(is)f(a)g(sunk)g(cost.)44
b(If)31 b(it)g(sp)r(en)n(t)f(t)n(wice)g(as)g(m)n(uc)n(h)681
921 y(or)e(half)g(as)g(m)n(uc)n(h)h(to)g(disco)n(v)n(er)d(the)j(drug,)g
(it)g(should)f(still)h(c)n(harge)e(the)i(same)681 1021
y(price,)e(b)r(ecause)g(that's)h(the)g(price)f(that)h(maximizes)f
(pro\014t.)p 0 TeXcolorgray 529 1147 a(\(b\))p 0 TeXcolorgray
42 w(The)21 b(only)f(time)i(that)f(R&D)g(costs)f(a\013ect)h(the)h
(compan)n(y's)d(b)r(eha)n(vior)h(is)h Fe(b)l(efor)l(e)681
1247 y Ff(they're)29 b(sunk:)40 b(when)30 b(the)g(compan)n(y)e(is)i
(thinking)f(ab)r(out)h(sp)r(ending)f(money)681 1346 y(on)20
b(R&D,)h(it)g(has)f(to)h(determine)g(whether)f(or)g(not)h(it's)g(going)
e(to)i(b)r(e)g(pro\014table)681 1446 y(to)36 b(mak)n(e)g(that)h(in)n(v)
n(estmen)n(t)f(giv)n(en)g(their)h(estimate)f(of)h(ho)n(w)f(m)n(uc)n(h)h
(they'll)681 1546 y(b)r(e)j(able)f(to)g(c)n(harge)f(for)h(the)h(pill.)
73 b(Once)39 b(they)h(do)f(the)h(R&D,)g(ho)n(w)n(ev)n(er,)681
1645 y(it's)30 b(a)g(sunk)h(cost)e(and)i(will)f(no)g(longer)f
(in\015uence)i(their)f(pro\014t-maximizing)681 1745 y(decisions.)p
0 TeXcolorgray 392 1904 a(2.)p 0 TeXcolorgray 41 w(W)-7
b(e)20 b(ha)n(v)n(e)e Fd(n)23 b Ff(=)g(0)p Fd(:)p Ff(1)18
b(and)h Fd(i)k Ff(=)g(0)p Fd(:)p Ff(04.)33 b(The)19 b(rule)g(of)h(th)n
(um)n(b)f(is)h Fd(r)25 b Fc(\031)e Fd(n)r Fc(\000)r Fd(i)f
Ff(=)h(0)p Fd(:)p Ff(1)r Fc(\000)r Ff(0)p Fd(:)p Ff(04)d(=)498
2004 y(0)p Fd(:)p Ff(06,)32 b(i.e.,)i(a)e(real)g(in)n(terest)g(rate)f
(of)i(ab)r(out)f(6\045.)51 b(Using)32 b(the)h(actual)f(form)n(ula)f(w)n
(e)498 2104 y(solv)n(e)c(1)17 b(+)i Fd(r)25 b Ff(=)1005
2071 y Fb(1+)p Fa(n)p 1005 2085 126 4 v 1014 2132 a Fb(1+)p
Fa(i)1168 2104 y Ff(to)i(get)h Fd(r)d Fc(\031)e Ff(5)p
Fd(:)p Ff(76\045.)p 0 TeXcolorgray 392 2263 a(3.)p 0
TeXcolorgray 0 TeXcolorgray 76 w(\(a\))p 0 TeXcolorgray
42 w(Plug)38 b($1000,)h(0)p Fd(:)p Ff(13,)h(and)e(30)g(y)n(ears)f(in)n
(to)h(the)i(ann)n(uit)n(y)e(form)n(ula)f(to)i(get)f(a)681
2363 y(presen)n(t)30 b(v)-5 b(alue)30 b(of)h(ab)r(out)g($749.57)c(for)k
(b)r(ene\014ts.)46 b(Since)31 b(the)g(presen)n(t)f(v)-5
b(alue)681 2462 y(of)27 b(costs)g(is)h($1000,)d(the)j(costs)f(are)f
(greater)g(than)i(the)g(b)r(ene\014ts.)p 0 TeXcolorgray
529 2588 a(\(b\))p 0 TeXcolorgray 42 w(The)23 b(in)n(terest)g(rate)f
(needs)h(to)g(go)f(do)n(wn.)35 b(Lo)n(w)n(er)21 b(in)n(terest)i(rates)f
(will)h(increase)681 2688 y(the)h(presen)n(t)g(v)-5 b(alue)24
b(of)h(the)f(b)r(ene\014ts)h(without)g(increasing)e(the)h(presen)n(t)g
(v)-5 b(alue)681 2788 y(of)23 b(the)g(costs.)35 b(Alternativ)n(ely)-7
b(,)23 b(y)n(ou)g(can)f(imagine)h(b)r(orro)n(wing)e(the)i($1000)e(and)
681 2887 y(ha)n(ving)28 b(to)i(pa)n(y)e(it)i(bac)n(k)f(plus)h(in)n
(terest.)42 b(The)29 b(lo)n(w)n(er)f(the)i(in)n(terest)f(rate,)h(the)
681 2987 y(easier)k(it)i(will)g(b)r(e)h(for)e(y)n(ou)g(to)h(pa)n(y)f
(bac)n(k)f(the)j(money)e(with)h(the)g(rev)n(en)n(ues)681
3087 y(generated)26 b(b)n(y)i(the)g(p)r(o)n(w)n(er)e(plan)n(t.)p
0 TeXcolorgray 538 3213 a(\(c\))p 0 TeXcolorgray 42 w(Plug)f($100)g
(and)h(0)p Fd(:)p Ff(13)f(in)n(to)h(the)h(presen)n(t)f(v)-5
b(alue)26 b(of)h(a)f(p)r(erp)r(etuit)n(y)h(form)n(ula)e(to)681
3312 y(get)i($769.23.)p 0 TeXcolorgray 529 3439 a(\(d\))p
0 TeXcolorgray 42 w(Put)22 b($769.23)d(in)j(the)h(bank)f(at)g(13\045)f
(in)n(terest)h(and)g(eac)n(h)f(y)n(ear)f(y)n(ou'll)i(get)g($100)681
3538 y(in)31 b(in)n(terest.)45 b(By)31 b(\\living)f(o\013)g(the)i(in)n
(terest",)e(y)n(ou)g(can)g(generate)g(pa)n(ymen)n(ts)681
3638 y(of)f($100)e(at)h(the)i(end)f(of)g(eac)n(h)f(y)n(ear)f(forev)n
(er)g(with)j(an)e(initial)h(in)n(v)n(estmen)n(t)g(of)681
3738 y(only)e($769.23.)p 0 TeXcolorgray 392 3897 a(4.)p
0 TeXcolorgray 0 TeXcolorgray 76 w(\(a\))p 0 TeXcolorgray
42 w(Driv)n(ers)34 b(who)g(mo)n(v)n(e)g(out)h(of)g(slo)n(w)g(lanes)f
(and)h(in)n(to)g(fast)g(lanes)f(slo)n(w)g(do)n(wn)681
3997 y(the)27 b(fast)g(lanes)g(and)g(sp)r(eed)g(up)g(the)h(slo)n(w)e
(lanes,)h(thereb)n(y)f(equalizing)g(tra\016c)681 4096
y(sp)r(eed)i(in)f(the)h(di\013eren)n(t)g(lanes.)p 0 TeXcolorgray
529 4222 a(\(b\))p 0 TeXcolorgray 42 w(These)f(economists)g(argue)f
(that)i(\\y)n(ou)e(can't)i(b)r(eat)f(the)h(mark)n(et")e(\(formally)-7
b(,)681 4322 y(this)28 b(is)f(called)h(the)g(e\016cien)n(t)g(mark)n(et)
f(h)n(yp)r(othesis\))g(and)h(therefore)f(that)h(y)n(ou)681
4422 y(should)33 b(in)n(v)n(est)g(in)i(an)e(index)h(fund)g(that)g(buys)
g(a)f(little)i(bit)f(of)g(ev)n(erything.)681 4521 y(The)e(idea)f(here)g
(is)h(that)g(this)g(sort)f(of)h(passiv)n(ely)e(managed)h(fund)h(will)g
(ha)n(v)n(e)681 4621 y(lo)n(w)n(er)23 b(managemen)n(t)g(costs)h(than)h
(an)f(activ)n(ely)g(managed)g(fund)h(that)g(tries)f(to)681
4721 y(b)r(eat)k(the)g(mark)n(et.)p 0 TeXcolorgray 392
4880 a(5.)p 0 TeXcolorgray 0 TeXcolorgray 76 w(\(a\))p
0 TeXcolorgray 42 w(The)d(exp)r(ected)h(v)-5 b(alues)25
b(are)f(\()p Fd(:)p Ff(0001\)\($1000000\))10 b(+)k(\()p
Fd(:)p Ff(9999\)\($0\))21 b(=)i($100)g(and)681 4980 y(\(1\)\($1000\))e
(=)i($1000.)p 0 TeXcolorgray 529 5106 a(\(b\))p 0 TeXcolorgray
42 w(There)i(is)h(a)g(v)n(ery)f(lo)n(w)g(probabilit)n(y)g(that)i(y)n
(our)e(v)n(ote)g(will)h(in\015uence)h(the)f(out-)681
5205 y(come)f(of)h(the)g(election,)g(so)f(the)h(exp)r(ected)g(v)-5
b(alue)26 b(from)g(thinking)g(ab)r(out)f(who)681 5305
y(to)35 b(v)n(ote)g(for)g(can)g(b)r(e)g(v)n(ery)g(lo)n(w)f(ev)n(en)h
(though)g(the)h(decision)f(itself)h(is)f(v)n(ery)681
5405 y(imp)r(ortan)n(t.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 840 523 a Ff(6.)p 0 TeXcolorgray
0 TeXcolorgray 77 w(\(a\))p 0 TeXcolorgray 41 w(\(0)p
Fd(:)p Ff(1\)\(0\))18 b(+)g(\()p Fd(:)p Ff(98\)\(105\))k(=)h(102)p
Fd(:)p Ff(9)p Fd(:)p 0 TeXcolorgray 977 656 a Ff(\(b\))p
0 TeXcolorgray 42 w(T)-7 b(o)41 b(maximize)f(y)n(our)g(presen)n(t)h(v)
-5 b(alue)40 b(y)n(ou)h(need)g(to)g(compare)e(the)j(return)1129
756 y(y)n(ou'll)c(get)g(from)g(\\in)n(v)n(esting)g(in)g(the)h(trees")f
(with)h(the)g(return)f(y)n(ou'll)f(get)1129 855 y(from)i(in)n(v)n
(esting)f(in)i(the)f(bank.)71 b(In)n(v)n(esting)38 b(in)i(the)f(bank)g
(means)g(cutting)1129 955 y(do)n(wn)33 b(the)g(trees)g(and)g(putting)g
(the)h(pro)r(ceeds)e(in)h(the)h(bank.)53 b(In)n(v)n(esting)32
b(in)1129 1054 y(the)e(trees)f(means)h(letting)g(the)g(trees)f(gro)n(w)
f(so)h(there)h(will)g(b)r(e)g(more)f(lum)n(b)r(er)1129
1154 y(next)f(y)n(ear.)p 0 TeXcolorgray 986 1287 a(\(c\))p
0 TeXcolorgray 42 w(The)g(real)e(in)n(terest)i(rate)e(has)i(to)f(b)r(e)
h(lo)n(w)n(er)e(than)i(2.9\045.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
